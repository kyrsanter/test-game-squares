{"version":3,"sources":["component/context/index.js","component/hoc/with-game-service.js","component/control-panel/form.js","component/control-panel/control-panel.js","component/control-panel/index.js","actions/action.js","component/preloader/index.js","component/preloader/preloader.js","component/game/game.js","component/game/index.js","component/score-table/score-table.js","component/desrc/index.js","component/desrc/descr.js","component/app/app.js","component/app/index.js","reducers/main.js","reducers/index.js","store.js","component/error-block/index.js","component/error-block/error-block.js","component/error-boundry/index.js","component/error-boundry/error-boundry.js","index.js","service/game-service.js","component/error-block/error.png"],"names":["React","createContext","GameProvider","Provider","GameConsumer","Consumer","withGameSrvice","Wrapped","props","gameService","service","Form","className","onSubmit","this","handleSubmit","Field","required","name","component","disabled","value","type","placeholder","started","Component","reduxForm","form","ControlPanel","makeSettings","min","max","arr","rndNumsArr","selfRandom","onGotRndNums","i","length","onBlocksGet","rnd","Math","floor","random","includes","push","submit","values","difficult","undefined","onSettigns","onLoadingStarted","getDifficultySettings","then","data","item","num","field","onGameStarted","alert","withGameService","connect","state","main","gameStarted","dispatch","payload","gotGameSettings","gotBlocks","gotRndNums","Preloader","Game","start","delay","blocks","hasWinner","Promise","resolve","makeBlue","setTimeout","makeRed","counter","rndNums","filter","elem","id","green","onRed","onBlue","toDoGreen","onGreen","find","block","canBeCliked","side","size","Fragment","map","style","blue","red","key","onClick","win","gameSettings","gamePlay","makeGreen","pc","score","user","onEndGame","Descr","App","sizeRef","createRef","current","offsetWidth","ref","loading","onLoadingStart","initialState","reducer","action","formData","id_blue","neededBlue","id_red","neededRed","id_green","neededGreen","combineReducers","formReducer","store","createStore","ErrorBlock","src","error","alt","ErrorBoundry","hasError","setState","children","_baseUrl","getResources","url","a","async","fetch","response","ok","json","Error","res","app","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.76f3a67a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nlet {\r\n    Provider: GameProvider,\r\n    Consumer: GameConsumer\r\n} = React.createContext();\r\n\r\nexport {\r\n    GameProvider,\r\n    GameConsumer\r\n}","import React from 'react';\r\nimport {GameConsumer} from '../context';\r\n\r\n\r\nconst withGameSrvice = (Wrapped) => {\r\n    return (props) => {\r\n        return (\r\n            <GameConsumer>\r\n                {\r\n                    (gameService) => {\r\n                        return <Wrapped {...props} service={gameService} />\r\n                    }\r\n                }\r\n            </GameConsumer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withGameSrvice;","import React from 'react';\r\nimport {reduxForm, Field} from 'redux-form';\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return (\r\n            <form className=\"control-panel\" onSubmit={this.props.handleSubmit}>\r\n                <div className=\"row\">\r\n                    <div className=\"col\">\r\n                        <Field required className=\"custom-select\" name=\"difficult\" component=\"select\">\r\n                            <option disabled>Choise one</option>\r\n                            <option value=\"easyMode\">Ease</option>\r\n                            <option value=\"normalMode\">Normal</option>\r\n                            <option value=\"hardMode\">Hard</option>\r\n                        </Field>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <Field type=\"text\" name=\"name\" className=\"form-control\" placeholder=\"Put your name\" component=\"input\"/>\r\n                    </div>\r\n                    <div className=\"col\">\r\n                        <button type=\"sudmit\" className=\"btn btn-secondary\">\r\n                            {\r\n                                this.props.started ? 'Play again' : 'Play'\r\n                            }\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default reduxForm({form: 'settings'})(Form);","import React from 'react';\r\nimport withGameService from '../hoc/with-game-service';\r\nimport { connect } from 'react-redux';\r\nimport Form from './form';\r\nimport './control-panel.css';\r\nimport {startGame, gotGameSettings, fetchLoading, gotBlocks, gotRndNums} from '../../actions/action';\r\n\r\nclass ControlPanel extends React.Component {\r\n\r\n    makeSettings = (min, max) => {\r\n        let arr = [];\r\n        let rndNumsArr = this.selfRandom(min, max);\r\n        this.props.onGotRndNums(rndNumsArr);\r\n        for (let i = 0; i < rndNumsArr.length; i++) {\r\n            arr[i] = {\r\n                'id': i,\r\n                'canBeCliked': false,\r\n                'cliked': false,\r\n                'blue': false,\r\n                'green': false,\r\n                'red': false,\r\n            }\r\n        }\r\n        this.props.onBlocksGet(arr);\r\n    }\r\n    \r\n    selfRandom = (min, max) => {\r\n        let arr = [];\r\n        while (arr.length < max) {\r\n            let rnd = Math.floor(Math.random() * (max - min + 1)) + min;\r\n            if (!arr.includes(rnd)) {\r\n                arr.push(rnd)\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    submit = (values) => {\r\n        debugger\r\n        let {difficult, name} = values;\r\n        if (difficult === undefined || name === undefined) {\r\n            alert(\"You must choose a difficulty level and put your name\");\r\n            return;\r\n        }\r\n        let {service, onSettigns, onLoadingStarted} = this.props;\r\n        onLoadingStarted();\r\n        service.getDifficultySettings()\r\n        .then(data => {\r\n            for (let item in data) {\r\n                if (item === difficult) {\r\n                    let num = data[item].field ** 2;\r\n                    this.makeSettings(0, num)\r\n                    onSettigns(data[item])\r\n                    this.props.onGameStarted();\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <Form onSubmit={this.submit} started={this.props.started}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        started: state.main.gameStarted,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onGameStarted: () => {\r\n            return dispatch(startGame())\r\n        },\r\n        onSettigns: (data) => {\r\n            return dispatch(gotGameSettings(data))\r\n        },\r\n        onLoadingStarted: () => {\r\n            return dispatch(fetchLoading())\r\n        },\r\n        onBlocksGet: (data) => {\r\n            return dispatch(gotBlocks(data))\r\n        },\r\n        onGotRndNums: (arr) => {\r\n            return dispatch(gotRndNums(arr))\r\n        }\r\n    }\r\n}\r\n\r\nexport default withGameService(connect(mapStateToProps, mapDispatchToProps)(ControlPanel));","import ControlPanel from './control-panel';\r\nexport default ControlPanel;","const fetchLoading = () => {\r\n    return {\r\n        type: 'FETCH_LOADING'\r\n    }\r\n}\r\n\r\nconst fetchFormData = (payload) => {\r\n    console.log(payload)\r\n    return {\r\n        type: 'FETCH_FORM_DATA',\r\n        payload\r\n    }\r\n}\r\n\r\nconst startGame = () => {\r\n    return {\r\n        type: 'START_GAME',\r\n    }\r\n}\r\n\r\nconst endGame = () => {\r\n    return {\r\n        type: 'END_GAME',\r\n    }\r\n}\r\n\r\nconst gotGameSettings = (data) => {\r\n    return {\r\n        type: 'GOT_GAME_SETTINGS',\r\n        payload: data,\r\n    }\r\n}\r\n\r\nconst gotBlocks = (data) => {\r\n    return {\r\n        type: 'GOT_BLOCKS',\r\n        payload: data\r\n    }\r\n}\r\n\r\nconst gotRndNums = (arr) => {\r\n    return {\r\n        type: 'GOT_RND_NUMS',\r\n        payload: arr\r\n    }\r\n}\r\n\r\nconst makeBlue = (id) => {\r\n    return {\r\n        type: 'MAKE_BLUE',\r\n        payload: id,\r\n    }\r\n}\r\n\r\nconst makeRed = (id) => {\r\n    return {\r\n        type: 'MAKE_RED',\r\n        payload: id,\r\n    }\r\n}\r\n\r\nconst makeGreen = (id) => {\r\n    return {\r\n        type: 'MAKE_GREEN',\r\n        payload: id\r\n    }\r\n}\r\n\r\nexport {\r\n    fetchLoading,\r\n    fetchFormData,\r\n    startGame,\r\n    gotGameSettings,\r\n    gotBlocks,\r\n    makeBlue,\r\n    gotRndNums,\r\n    makeRed,\r\n    makeGreen,\r\n    endGame\r\n}","import Preloader from './preloader';\r\nexport default Preloader;","import React from 'react';\r\nimport './preloader.css';\r\n\r\nconst Preloader = () => {\r\n    return (\r\n        <div className=\"preloader\">\r\n            <div className=\"container\">\r\n                <div className=\"loadingio-spinner-double-ring-1vus6d2jg24\">\r\n                    <div className=\"ldio-yualpvbqphi\">\r\n                        <div></div>\r\n                        <div></div>\r\n                        <div>\r\n                            <div></div>\r\n                        </div>\r\n                        <div>\r\n                            <div></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport './game.css';\r\nimport { connect } from 'react-redux';\r\nimport {makeBlue, makeGreen, makeRed} from '../../actions/action'\r\n\r\n\r\nclass Game extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.counter = 0;\r\n        this.start();\r\n    }\r\n\r\n    start = () => {\r\n        let {delay, blocks, hasWinner} = this.props;\r\n        let promise = new Promise(resolve => {\r\n            this.makeBlue()\r\n            setTimeout(resolve, delay)\r\n        })\r\n        promise.then(() => {\r\n            this.makeRed();\r\n            if (this.counter < blocks.length && !hasWinner) {\r\n                this.start();\r\n            }\r\n        })\r\n    }\r\n\r\n    makeRed = () => {\r\n        let {rndNums, blocks, hasWinner} = this.props;\r\n        if (hasWinner) {\r\n            return;\r\n        }\r\n        let [{...needed}] = blocks.filter((elem) => elem.id === rndNums[this.counter]);\r\n        if (!needed.green) {\r\n            this.props.onRed(rndNums[this.counter])\r\n        }\r\n        this.counter++;\r\n    }\r\n\r\n    makeBlue = () => {\r\n        let {rndNums, blocks, hasWinner} = this.props;\r\n        if (this.counter < blocks.length && !hasWinner) {\r\n            this.props.onBlue(rndNums[this.counter]);\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    toDoGreen = (id) => {\r\n        let {blocks, onGreen} = this.props;\r\n        let needed = blocks.find( (block) => block.id === id )\r\n        let {canBeCliked} = needed;\r\n        if (canBeCliked) {\r\n            onGreen(id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let {blocks, size, field} = this.props;\r\n        let side = size / field;\r\n        return (\r\n            <React.Fragment>\r\n                {\r\n                    blocks.map(block => {\r\n                        return (\r\n                            <div\r\n                                style={\r\n                                    {\r\n                                        'width': `${side}px`,\r\n                                        'height': `${side}px`,\r\n                                        'background' : `${block.blue ? 'blue' : block.red ? 'red': block.green ? 'green' : 'none'}`\r\n                                    }\r\n                                }\r\n                                key={block.id}\r\n                                onClick={()=> this.toDoGreen(block.id)}\r\n                                className=\"game-block\" >{null}</div>\r\n                        )\r\n                    })\r\n                }\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let { main } = state;\r\n    return {\r\n        hasWinner: main.win,\r\n        delay: main.gameSettings.delay,\r\n        field: main.gameSettings.field,\r\n        blocks: main.gameSettings.gamePlay,\r\n        rndNums: main.rndNums,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onRed: (id) => {\r\n            return dispatch(makeRed(id))\r\n        },\r\n        onBlue: (id) => {\r\n            return dispatch(makeBlue(id))\r\n        },\r\n        onGreen: (id) => {\r\n            return dispatch(makeGreen(id))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","import Game from './game';\r\nexport default Game;","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {endGame} from '../../actions/action'\r\n\r\nconst ScoreTable = (props) => {\r\n    let {pc, user, field} = props;\r\n    let max = field ** 2;\r\n    if (pc > max / 2  + 1) {\r\n        props.onEndGame()\r\n        return (\r\n            <div className=\"score-table\">\r\n                <h1>PC WIN!!! With {pc} scores</h1>\r\n            </div>\r\n        )\r\n    }\r\n    else if (user > max / 2 + 1) {\r\n        props.onEndGame()\r\n        return (\r\n            <div className=\"score-table\">\r\n                <h1>User WIN!!! With {user} scores</h1>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"score-table\">\r\n            <div>User scores: {user}</div>\r\n            <div>PC scores: {pc}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let {main} = state;\r\n    return {\r\n        field: main.gameSettings.field,\r\n        pc: main.score.pc,\r\n        user: main.score.user,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onEndGame: () => {\r\n            return dispatch(endGame())\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ScoreTable);","import Descr from \"./descr\";\r\nexport default  Descr;","import React from \"react\";\r\n\r\nconst Descr = () => {\r\n    return (\r\n        <section className=\"mb-2\">\r\n            <ol>\r\n                <li>User set game difficulty and name</li>\r\n                <li>Press PLAY</li>\r\n                <li>At a specified time interval a random square on the field is highlighted in blue</li>\r\n                <li>If the user managed to click on the square during this time - he turns green, the player gets a point and the field changes color to green</li>\r\n                <li>If not, the field turns red and the point goes to the computer</li>\r\n                <li>When a player or computer paints >50% of all possible squares in his color - he becomes the winner</li>\r\n            </ol>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Descr;\r\n","import React from 'react';\r\nimport './app.css';\r\nimport ControlPanel from '../control-panel';\r\nimport {connect} from 'react-redux';\r\nimport {fetchLoading} from '../../actions/action';\r\nimport Preloader from '../preloader'\r\nimport Game from '../game'\r\nimport ScoreTable from '../score-table/score-table';\r\nimport Descr from \"../desrc\";\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.sizeRef = React.createRef() \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.size = this.sizeRef.current.offsetWidth;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <section className=\"game\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-lg-6\">\r\n                            <ControlPanel />\r\n                            {\r\n                                this.props.started ? null : <Descr/>\r\n                            }\r\n                        </div>\r\n                        <div className=\"col-lg-6\">\r\n                            <section ref={this.sizeRef} className=\"game\">\r\n                                {\r\n                                    this.props.loading ? <Preloader /> : (this.props.started) ? <Game size={this.size}/> : null\r\n                                }\r\n                            </section>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <div className=\"col-lg-4\">\r\n                            {\r\n                                this.props.started ? <ScoreTable /> : null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    let {main} = state;\r\n    return {\r\n        loading: main.loading,\r\n        started: main.gameStarted\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onLoadingStart: () => {\r\n            return dispatch(fetchLoading());\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import App  from './app';\r\nexport default App;","let initialState = {\r\n    gameStarted: false,\r\n    loading: false,\r\n    gameSettings: {\r\n        field: null,\r\n        delay: null,\r\n        gamePlay: null\r\n    },\r\n    score: {\r\n        pc: 0,\r\n        user: 0\r\n    },\r\n    rndNums: null,\r\n    win: false,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'FETCH_LOADING':\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        case 'FETCH_FORM_DATA':\r\n            return {\r\n                ...state,\r\n                formData: action.payload\r\n            }\r\n        case 'START_GAME': \r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                gameStarted: true\r\n            }\r\n        case 'END_GAME': {\r\n            return {\r\n                ...state,\r\n                win: true\r\n            }\r\n        }\r\n        case 'GOT_GAME_SETTINGS': {\r\n            let {field, delay} = action.payload;\r\n            return { \r\n                ...state,\r\n                gameSettings: {\r\n                    field,\r\n                    delay,\r\n                    gamePlay: state.gameSettings.gamePlay,\r\n                }\r\n            }\r\n        }\r\n        case 'GOT_BLOCKS':\r\n            return {\r\n                ...state,\r\n                gameSettings: {\r\n                    field: state.gameSettings.field,\r\n                    delay: state.gameSettings.delay,\r\n                    gamePlay: action.payload\r\n                }\r\n            }\r\n        case 'GOT_RND_NUMS': \r\n            return {\r\n                ...state,\r\n                rndNums: action.payload\r\n            }\r\n        case 'MAKE_BLUE': \r\n            let {payload: id_blue} = action;\r\n            let neededBlue = state.gameSettings.gamePlay.map(elem => {\r\n                if (elem.id === id_blue) {\r\n                    elem.canBeCliked = true;\r\n                    elem.blue = true;\r\n                    return elem;\r\n                }\r\n                else {\r\n                    return elem\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                gameSettings: {\r\n                    ...state.gameSettings,\r\n                    gamePlay: [...neededBlue]\r\n                }\r\n            }\r\n        case 'MAKE_RED': \r\n        let {payload: id_red} = action;\r\n        let neededRed = state.gameSettings.gamePlay.map(elem => {\r\n            if (elem.id === id_red && !elem.green) {\r\n                elem.canBeCliked = false;\r\n                elem.blue = false;\r\n                elem.red = true;\r\n                return elem;\r\n            }\r\n            else {\r\n                return elem\r\n            }\r\n        })\r\n        return {\r\n            ...state,\r\n            gameSettings: {\r\n                ...state.gameSettings,\r\n                gamePlay: [...neededRed]\r\n            },\r\n            score: {\r\n                user: state.score.user,\r\n                pc: state.score.pc + 1\r\n            }\r\n\r\n        }\r\n\r\n        case 'MAKE_GREEN': \r\n        let {payload: id_green} = action;\r\n        let neededGreen = state.gameSettings.gamePlay.map(elem => {\r\n            if (elem.id === id_green) {\r\n                elem.canBeCliked = false;\r\n                elem.blue = false;\r\n                elem.green = true;\r\n                return elem;\r\n            }\r\n            else {\r\n                return elem\r\n            }\r\n        })\r\n        return {\r\n            ...state,\r\n            gameSettings: {\r\n                ...state.gameSettings,\r\n                gamePlay: [...neededGreen]\r\n            },\r\n            score: {\r\n                user: state.score.user + 1,\r\n                pc: state.score.pc\r\n            }\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;","import {combineReducers} from 'redux';\r\nimport main from './main';\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\nconst reducer = combineReducers({\r\n    main,\r\n    form: formReducer\r\n})\r\n\r\nexport default reducer;","import {createStore} from 'redux';\r\nimport reducer from './reducers';\r\n\r\nlet store = createStore(reducer);\r\nexport default store;","import ErrorBlock from './error-block';\r\nexport default ErrorBlock;","import React from 'react';\r\nimport error from './error.png';\r\n\r\nconst ErrorBlock = () => {\r\n    return (\r\n        <section className=\"error-block\">\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-6 text-center\">\r\n                        <img src={error} alt=\"error\" />\r\n                        <h1>Упс, что то пошло не так!</h1>\r\n                        <h2>Конгресс США уже работает над устранением проблемы</h2>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default ErrorBlock;","import ErrorBoundry from './error-boundry';\r\nexport default ErrorBoundry;","import React from 'react';\r\nimport ErrorBlock from '../error-block';\r\n\r\nexport default class ErrorBoundry extends React.Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            hasError: false,\r\n        }\r\n    }\r\n\r\n    componentDidCatch() {\r\n        this.setState({\r\n            hasError: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let {hasError} = this.state;\r\n        return hasError ? <ErrorBlock /> : this.props.children;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/app';\nimport GameService from './service/game-service';\nimport {GameProvider} from './component/context';\nimport {Provider} from 'react-redux';\nimport store from './store';\nimport ErrorBoundry from './component/error-boundry';\n\nlet gameService = new GameService();\n\nlet app = (\n    <Provider store={store}>\n        <GameProvider value={gameService}>\n            <ErrorBoundry>\n                <App />\n            </ErrorBoundry>\n        </GameProvider>\n    </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));","export default class GameService {\r\n    _baseUrl = `https://starnavi-frontend-test-task.herokuapp.com/`;\r\n\r\n    getResources = async (url) => {\r\n        let response = await fetch(`${this._baseUrl}${url}`);\r\n        if (response.ok) {\r\n            return await response.json();\r\n        }\r\n        else {\r\n            throw new Error('Упс, с твоим интернетом что то не то!!!');\r\n        }\r\n    };\r\n\r\n    getDifficultySettings = async () => {\r\n        let res = await this.getResources('game-settings');\r\n        return res;\r\n    };\r\n}\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/error.500dce70.png\";"],"sourceRoot":""}